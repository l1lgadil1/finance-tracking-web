generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

enum TransactionType {
  income
  expense
  transfer
  debt_give
  debt_take
  debt_repay
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  isPremium     Boolean        @default(false)
  name          String?
  phone         String?
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  aiRequests    AIRequestLog[]
  accounts      Account[]
  categories    Category[]
  goals         Goal[]
  profiles      Profile[]
  subscriptions Subscription[]
  transactions  Transaction[]
  accountTypes  AccountType[]
  categoryTypes CategoryType[]
  conversations Conversation[]
}

model Profile {
  id           String        @id @default(uuid())
  name         String
  type         String
  userId       String
  createdAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model AccountType {
  id        String    @id @default(uuid())
  name      String
  userId    String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  deletedAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
  accounts  Account[]
}

model CategoryType {
  id         String     @id @default(uuid())
  name       String
  userId     String
  createdAt  DateTime   @default(now())
  updatedAt  DateTime   @updatedAt
  deletedAt  DateTime?
  isSystem   Boolean    @default(false)
  user       User       @relation(fields: [userId], references: [id])
  categories Category[]
}

model Account {
  id                      String        @id @default(uuid())
  name                    String
  balance                 Float         @default(0)
  userId                  String
  createdAt               DateTime      @default(now())
  user                    User          @relation(fields: [userId], references: [id])
  transactions            Transaction[] @relation("TransactionAccount")
  accountTypeId           String?
  accountType             AccountType?  @relation(fields: [accountTypeId], references: [id])
  accountTypeNameSnapshot String?
}

model Category {
  id                       String        @id @default(uuid())
  name                     String
  icon                     String?
  userId                   String?
  user                     User?         @relation(fields: [userId], references: [id])
  transactions             Transaction[]
  categoryTypeId           String?
  categoryType             CategoryType? @relation(fields: [categoryTypeId], references: [id])
  categoryTypeNameSnapshot String?
}

model Transaction {
  id            String          @id @default(uuid())
  type          TransactionType
  amount        Float
  description   String?
  date          DateTime
  createdAt     DateTime        @default(now())
  userId        String
  profileId     String
  categoryId    String?
  accountId     String?
  fromAccountId String?
  toAccountId   String?
  contactName   String?
  contactPhone  String?
  debtStatus    String?
  relatedDebtId String?
  account       Account?        @relation("TransactionAccount", fields: [accountId], references: [id])
  category      Category?       @relation(fields: [categoryId], references: [id])
  profile       Profile         @relation(fields: [profileId], references: [id])
  user          User            @relation(fields: [userId], references: [id])
}

model Goal {
  id       String    @id @default(uuid())
  title    String
  target   Float
  saved    Float     @default(0)
  deadline DateTime?
  userId   String
  user     User      @relation(fields: [userId], references: [id])
}

model Subscription {
  id        String    @id @default(uuid())
  userId    String
  status    String
  plan      String?
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model AIRequestLog {
  id        String   @id @default(uuid())
  prompt    String
  response  String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}

// AI Assistant conversation model
model Conversation {
  id        String    @id @default(uuid())
  userId    String
  title     String?   @db.VarChar(255)
  messages  ConversationMessage[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@index([userId])
}

// AI Assistant conversation message model
model ConversationMessage {
  id             String    @id @default(uuid())
  conversationId String
  role           String    @db.VarChar(20) // 'user' or 'assistant'
  content        String    @db.Text
  createdAt      DateTime  @default(now())
  
  conversation   Conversation @relation(fields: [conversationId], references: [id], onDelete: Cascade)
  
  @@index([conversationId])
}
