generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String         @id @default(uuid())
  email         String         @unique
  password      String
  isPremium     Boolean        @default(false)
  createdAt     DateTime       @default(now())
  updatedAt     DateTime       @updatedAt
  aiRequests    AIRequestLog[]
  accounts      Account[]
  categories    Category[]
  goals         Goal[]
  profiles      Profile[]
  subscriptions Subscription[]
  transactions  Transaction[]
}

model Profile {
  id           String        @id @default(uuid())
  name         String
  type         String
  userId       String
  createdAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Account {
  id           String        @id @default(uuid())
  name         String
  balance      Float         @default(0)
  userId       String
  createdAt    DateTime      @default(now())
  user         User          @relation(fields: [userId], references: [id])
  transactions Transaction[] @relation("TransactionAccount")
}

model Category {
  id           String        @id @default(uuid())
  name         String
  icon         String?
  type         String
  userId       String?
  user         User?         @relation(fields: [userId], references: [id])
  transactions Transaction[]
}

model Transaction {
  id            String    @id @default(uuid())
  type          String
  amount        Float
  description   String?
  date          DateTime
  createdAt     DateTime  @default(now())
  userId        String
  profileId     String
  categoryId    String?
  accountId     String?
  fromAccountId String?
  toAccountId   String?
  contactName   String?
  contactPhone  String?
  debtStatus    String?
  account       Account?  @relation("TransactionAccount", fields: [accountId], references: [id])
  category      Category? @relation(fields: [categoryId], references: [id])
  profile       Profile   @relation(fields: [profileId], references: [id])
  user          User      @relation(fields: [userId], references: [id])
}

model Goal {
  id       String    @id @default(uuid())
  title    String
  target   Float
  saved    Float     @default(0)
  deadline DateTime?
  userId   String
  user     User      @relation(fields: [userId], references: [id])
}

model Subscription {
  id        String    @id @default(uuid())
  userId    String
  status    String
  plan      String?
  expiresAt DateTime?
  user      User      @relation(fields: [userId], references: [id])
}

model AIRequestLog {
  id        String   @id @default(uuid())
  prompt    String
  response  String
  createdAt DateTime @default(now())
  userId    String
  user      User     @relation(fields: [userId], references: [id])
}
