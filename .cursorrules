# Cursor Rules for AqshaTracker Backend

This file captures project-specific patterns, preferences, and intelligence learned during development.

## General

- **Memory Bank:** Always read all Memory Bank files (`memory-bank/*.md`) at the start of each session to maintain context. Update them frequently, especially `activeContext.md` and `progress.md`.
- **Task Workflow:** Follow the Plan/Act modes as defined in internal instructions. Use `/plan` for significant tasks, ask clarifying questions, get plan approval, and report progress.
- **User:** The user is an expert programmer. Avoid obvious code comments.

## Technology & Patterns

- **Stack:** NestJS, Prisma, PostgreSQL, JWT, bcrypt, Zod (`nestjs-zod`), Swagger.
- **Architecture:** Modular REST API.
- **Validation:** Use `nestjs-zod` for DTOs and validation.
- **Authentication:** JWT via Passport.js. Protect routes with `JwtAuthGuard`. Use a `@CurrentUser` decorator for user ID access.
- **Database:** Interact via `PrismaService` provided by a global `PrismaModule`.
- **Configuration:** Use `@nestjs/config` and `.env` files.
- **API Docs:** Use Swagger (`@nestjs/swagger`).

## Frontend Patterns

- **Architecture:** Follow Feature Sliced Design (FSD) principles for organizing code.
- **Component Reuse:** Always reuse existing UI components from `shared/ui` directory. Only create new components when existing ones cannot be adapted for the required functionality.
- **Styling:** Use Tailwind CSS with custom theme variables for consistent styling.
- **State Management:** Use Zustand for global state management.
- **Animations:** Use Framer Motion for component animations.
- **Localization:** Always implement component-level translation dictionaries for any component with user-facing text. Support English and Russian locales at minimum.
- **Theme Support:** Ensure all components work with both light and dark themes.
- **Responsive Design:** All components should be responsive across mobile, tablet, and desktop.

## Implementation Details (To be discovered/confirmed)

- Specific implementation of `@CurrentUser` decorator.
- Transaction service logic for different types (transfer balance updates, debt tracking).
- Filtering logic implementation details.
- Error handling strategy. 